services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "--quiet", "--dbname", "${POSTGRES_DB}", "--username", "${POSTGRES_USER}" ]
      start_period: 10s
      interval: 10s
      timeout: 45s
      retries: 10
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?Please configure POSTGRES_USER in the .env file}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please configure POSTGRES_PASSWORD in the .env file}
      POSTGRES_DB: ${POSTGRES_DB:?Please configure POSTGRES_DB in the .env file}
      POSTGRES_APP_USER: ${POSTGRES_APP_USER:?Please configure POSTGRES_APP_USER in the .env file}
      POSTGRES_APP_PASS: ${POSTGRES_APP_PASS:?Please configure POSTGRES_APP_PASS in the .env file}
      POSTGRES_APP_DB: ${POSTGRES_APP_DB:?Please configure POSTGRES_APP_DB in the .env file}
    volumes:
      - ./etc/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./volume/postgresql:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - gofermart-network

  pgadmin:
    image: dpage/pgadmin4:8.6
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      start_period: 10s
      interval: 10s
      timeout: 45s
      retries: 10
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:?Please configure PGADMIN_DEFAULT_EMAIL in the .env file}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_EMAIL:?Please configure PGADMIN_DEFAULT_EMAIL in the .env file}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - ./etc/pgadmin4/servers.json:/pgadmin4/servers.json
       - ./volume/pgadmin:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-7080}:80
    networks:
      - gofermart-network

  gophermart-api:
    depends_on:
      - postgres
    restart: always
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    image: gophermart-api:v1.0
    container_name: gophermart-api
    hostname: gophermart-api
    networks:
      - gofermart-network
    ports:
      - 80:8080
    environment:
      - DATABASE_URI=${DATABASE_URI:?Please configure DATABASE_URI in the .env file}
      - ACCRUAL_SYSTEM_ADDRESS=${ACCRUAL_SYSTEM_ADDRESS:?Please configure ACCRUAL_SYSTEM_ADDRESS in the .env file}
      - NUM_WORKERS=${NUM_WORKERS:?Please configure NUM_WORKERS in the .env file}
      - LOG_LEVEL=${LOG_LEVEL:?Please configure LOG_LEVEL in the .env file}
    deploy:
      restart_policy:
        condition: on-failure

  accrual-api:
    restart: always
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    image: accrual-api
    container_name: accrualclient-api
    hostname: accrualclient-api
    networks:
      - gofermart-network
    ports:
      - 81:8080
    deploy:
      restart_policy:
        condition: on-failure